//Фаза 0 - Timers. Таймеры при запуске программы отсутсвуют, переходим к следующей фазе.
//Фаза 0.1 (Pending callbacks) - отсутствует.
//Фаза 0.2 (Idle, prepare) - не для разработчиков. Отсутсвует.

//Фаза 1 - Poll. Выполняется первым делом (первый вывод в консоль)
console.log('Record 1');

//Второй тик. (читать после прочтения конца файла (конца первого тика))
// Фаза 0 Timers.
// Начинается после окончания всего первого тика сразу же, так как таймер установлен в 0.
// Если бы таймер был не 0 - происходила проверка, прошло ли время, если да - то вызывалось бы.
// Если нет - то ждало следующей проверки на следующем тике.
setTimeout(() => {
    //Фаза 1 - Poll. Выполняется первым делом (четвертый вывод в консоль).
    console.log('Record 2');
    //"Фаза 2" - Микрозадачи. Выполняется промис.
    Promise.resolve().then(() => {
        //"Фаза 3" - setImmediate - отсутсвуют, переходим на третий тик.
        //Третий тик. Фаза 0 Timers.
        setTimeout(() => {
            //Фаза 1 - Poll. Выполняется первым делом (пятый вывод в консоль)
            console.log('Record 3');
            //"Фаза 2" - Микрозадачи. Завершающий вывод (шестой вывод в консоль)
            Promise.resolve().then(() => {
                console.log('Record 4');
            });
        });
    });
});

//Фаза 1 - Poll. Выполняется первым делом (второй вывод в консоль)
console.log('Record 5');

//"Фаза 2" - Микрозадачи. Даже если бы колбек стаял выше обычного вывода данных (стадия Poll) - он бы вызывался после всех вызовов стадии Poll. (третий вывод в консоль)
//внутри добавляется еще одна микрозадача в очереди. Так как в очереди микрозадач больше ничего нет - она выполнится следующей.
Promise.resolve().then(() => Promise.resolve().then(() => console.log('Record 6')));

//"Фаза 3" - макрозадачи setImmediate - отсутсвуют, переходим на второй тик.